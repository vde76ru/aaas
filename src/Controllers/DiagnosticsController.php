<?php
namespace App\Controllers;

use App\Core\Database;
use App\Core\Logger;
use App\Core\Cache;
use App\Core\Config;
use App\Core\Paths;
use App\Core\Env;
use App\Services\AuthService;
use App\Services\MetricsService;
use App\Services\QueueService;
use App\Services\EmailService;
use OpenSearch\ClientBuilder;

/**
 * –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã VDestor B2B
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
class DiagnosticsController extends BaseController
{
    private array $diagnostics = [];
    private float $startTime;
    private int $totalChecks = 0;
    private int $passedChecks = 0;
    private int $warningChecks = 0;
    private int $failedChecks = 0;
    private array $criticalErrors = [];

    public function __construct()
    {
        $this->startTime = microtime(true);
    }

    /**
     * GET /api/admin/diagnostics/run - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
     */
    public function runAction(): void
    {
        header('Content-Type: application/json; charset=utf-8');
        header('Cache-Control: no-store, no-cache, must-revalidate');
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        set_time_limit(300);
        ini_set('memory_limit', '512M');

        try {
            // === 1. –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–í–ï–†–ö–ò ===
            $this->checkSystemInfo();
            $this->checkPHPConfiguration();
            $this->checkPHPExtensions();
            $this->checkFileSystem();
            $this->checkPermissions();
            $this->checkDiskSpace();
            $this->checkSystemLoad();
            
            // === 2. –°–ï–¢–ï–í–´–ï –ü–†–û–í–ï–†–ö–ò ===
            $this->checkNetworkConnectivity();
            $this->checkDNS();
            $this->checkHTTPS();
            
            // === 3. –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
            $this->checkDatabase();
            $this->checkDatabaseTables();
            $this->checkDatabaseIndexes();
            $this->checkDatabasePerformance();
            $this->checkDatabaseIntegrity();
            $this->checkDatabaseSize();
            
            // === 4. OPENSEARCH ===
            $this->checkOpenSearch();
            $this->checkOpenSearchIndexes();
            $this->checkOpenSearchPerformance();
            
            // === 5. –ö–ï–® ===
            $this->checkCache();
            $this->checkCachePerformance();
            $this->checkCacheSize();
            
            // === 6. –°–ï–°–°–ò–ò ===
            $this->checkSessions();
            $this->checkSessionSecurity();
            $this->checkActiveSessions();
            
            // === 7. –û–ß–ï–†–ï–î–ò ===
            $this->checkQueues();
            $this->checkQueueWorkers();
            $this->checkFailedJobs();
            
            // === 8. EMAIL ===
            $this->checkEmailConfiguration();
            $this->checkEmailDelivery();
            
            // === 9. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ===
            $this->checkSecurityHeaders();
            $this->checkFileSecurityPermissions();
            $this->checkConfigurationSecurity();
            $this->checkLoginAttempts();
            $this->checkSuspiciousActivity();
            
            // === 10. –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===
            $this->checkAPIPerformance();
            $this->checkPageLoadTime();
            $this->checkSlowQueries();
            $this->checkMemoryUsage();
            
            // === 11. –õ–û–ì–ò –ò –û–®–ò–ë–ö–ò ===
            $this->checkErrorLogs();
            $this->checkApplicationLogs();
            $this->checkAccessLogs();
            $this->checkSecurityLogs();
            
            // === 12. –î–ê–ù–ù–´–ï –ò –ö–û–ù–¢–ï–ù–¢ ===
            $this->checkDataIntegrity();
            $this->checkOrphanedRecords();
            $this->checkDuplicateData();
            $this->checkMissingRelations();
            
            // === 13. –ú–ï–¢–†–ò–ö–ò –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
            $this->checkMetrics();
            $this->checkBusinessMetrics();
            $this->checkSystemMetrics();
            
            // === 14. –í–ù–ï–®–ù–ò–ï –°–ï–†–í–ò–°–´ ===
            $this->checkExternalAPIs();
            $this->checkCDNServices();
            
            // === 15. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
            $this->checkConfiguration();
            $this->checkEnvironmentVariables();
            $this->checkCronJobs();
            
            // === 16. –§–†–û–ù–¢–ï–ù–î ===
            $this->checkAssets();
            $this->checkJavaScript();
            $this->checkCSS();
            
            // === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===
            $report = $this->generateReport();
            $this->success($report);

        } catch (\Exception $e) {
            Logger::error('Diagnostics failed', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            $this->error('Diagnostics failed: ' . $e->getMessage(), 500);
        }
    }

    // === 1. –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–í–ï–†–ö–ò ===

    private function checkSystemInfo(): void
    {
        $this->totalChecks++;
        
        $data = [
            'title' => 'üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ',
            'status' => '‚úÖ OK',
            'data' => [
                'Hostname' => gethostname(),
                'OS' => php_uname('s') . ' ' . php_uname('r'),
                'Architecture' => php_uname('m'),
                'PHP Version' => PHP_VERSION,
                'PHP SAPI' => PHP_SAPI,
                'Server Software' => $_SERVER['SERVER_SOFTWARE'] ?? 'Unknown',
                'Server Time' => date('Y-m-d H:i:s'),
                'Timezone' => date_default_timezone_get(),
                'Uptime' => $this->getSystemUptime()
            ]
        ];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PHP
        if (version_compare(PHP_VERSION, '7.4.0', '<')) {
            $data['status'] = '‚ùå Error';
            $data['error'] = 'PHP –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ 7.4.0';
            $this->failedChecks++;
            $this->criticalErrors[] = '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è PHP';
        } else {
            $this->passedChecks++;
        }
        
        $this->diagnostics['system'] = $data;
    }

    private function checkPHPConfiguration(): void
    {
        $this->totalChecks++;
        
        $requiredSettings = [
            'memory_limit' => ['required' => '256M', 'compare' => '>='],
            'max_execution_time' => ['required' => 300, 'compare' => '>='],
            'post_max_size' => ['required' => '32M', 'compare' => '>='],
            'upload_max_filesize' => ['required' => '32M', 'compare' => '>='],
            'max_input_vars' => ['required' => 1000, 'compare' => '>='],
            'max_file_uploads' => ['required' => 20, 'compare' => '>=']
        ];
        
        $checks = [];
        $hasErrors = false;
        
        foreach ($requiredSettings as $setting => $requirement) {
            $current = ini_get($setting);
            
            if ($setting === 'max_execution_time' && $current == 0) {
                $checks[$setting] = [
                    'current' => 'Unlimited',
                    'required' => $requirement['required'],
                    'status' => '‚úÖ'
                ];
                continue;
            }
            
            $currentBytes = $this->parseSize($current);
            $requiredBytes = $this->parseSize($requirement['required']);
            
            $passed = false;
            switch ($requirement['compare']) {
                case '>=':
                    $passed = $currentBytes >= $requiredBytes;
                    break;
                case '<=':
                    $passed = $currentBytes <= $requiredBytes;
                    break;
            }
            
            $checks[$setting] = [
                'current' => $current,
                'required' => $requirement['required'],
                'status' => $passed ? '‚úÖ' : '‚ùå'
            ];
            
            if (!$passed) {
                $hasErrors = true;
            }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        $additionalSettings = [
            'display_errors' => ini_get('display_errors'),
            'error_reporting' => error_reporting(),
            'log_errors' => ini_get('log_errors'),
            'error_log' => ini_get('error_log'),
            'date.timezone' => ini_get('date.timezone'),
            'default_charset' => ini_get('default_charset'),
            'opcache.enable' => ini_get('opcache.enable'),
            'opcache.memory_consumption' => ini_get('opcache.memory_consumption'),
            'session.gc_maxlifetime' => ini_get('session.gc_maxlifetime'),
            'session.save_handler' => ini_get('session.save_handler')
        ];
        
        $data = [
            'title' => '‚öôÔ∏è PHP –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
            'status' => $hasErrors ? '‚ùå Error' : '‚úÖ OK',
            'checks' => $checks,
            'additional' => $additionalSettings
        ];
        
        if ($hasErrors) {
            $data['error'] = '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PHP –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º';
            $this->failedChecks++;
        } else {
            $this->passedChecks++;
        }
        
        $this->diagnostics['php_config'] = $data;
    }

    private function checkPHPExtensions(): void
    {
        $this->totalChecks++;
        
        $requiredExtensions = [
            'pdo' => '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            'pdo_mysql' => 'MySQL –¥—Ä–∞–π–≤–µ—Ä',
            'json' => 'JSON –æ–±—Ä–∞–±–æ—Ç–∫–∞',
            'curl' => 'HTTP –∑–∞–ø—Ä–æ—Å—ã',
            'mbstring' => '–ú—É–ª—å—Ç–∏–±–∞–π—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏',
            'openssl' => '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ',
            'session' => '–°–µ—Å—Å–∏–∏',
            'zip' => '–ê—Ä—Ö–∏–≤—ã',
            'gd' => '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            'fileinfo' => '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤',
            'bcmath' => '–¢–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è',
            'intl' => '–ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è'
        ];
        
        $optionalExtensions = [
            'opcache' => '–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞',
            'redis' => 'Redis –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
            'imagick' => '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            'apcu' => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–µ—à',
            'xdebug' => '–û—Ç–ª–∞–¥–∫–∞',
            'igbinary' => '–ë–∏–Ω–∞—Ä–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è'
        ];
        
        $installedRequired = [];
        $missingRequired = [];
        $installedOptional = [];
        
        foreach ($requiredExtensions as $ext => $desc) {
            if (extension_loaded($ext)) {
                $installedRequired[$ext] = $desc;
            } else {
                $missingRequired[$ext] = $desc;
            }
        }
        
        foreach ($optionalExtensions as $ext => $desc) {
            if (extension_loaded($ext)) {
                $installedOptional[$ext] = $desc;
            }
        }
        
        $data = [
            'title' => 'üß© PHP –†–∞—Å—à–∏—Ä–µ–Ω–∏—è',
            'status' => empty($missingRequired) ? '‚úÖ OK' : '‚ùå Error',
            'required' => [
                'installed' => $installedRequired,
                'missing' => $missingRequired
            ],
            'optional' => $installedOptional,
            'total_loaded' => count(get_loaded_extensions())
        ];
        
        if (!empty($missingRequired)) {
            $data['error'] = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ' . implode(', ', array_keys($missingRequired));
            $this->failedChecks++;
            $this->criticalErrors[] = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç PHP —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è';
        } else {
            $this->passedChecks++;
        }
        
        $this->diagnostics['php_extensions'] = $data;
    }

    private function checkFileSystem(): void
    {
        $this->totalChecks++;
        
        $paths = [
            'root' => Paths::get('root'),
            'public' => Paths::get('public'),
            'config' => Paths::get('config'),
            'logs' => Paths::get('logs'),
            'cache' => Paths::get('cache'),
            'sessions' => Paths::get('sessions'),
            'uploads' => Paths::get('uploads'),
            'assets' => Paths::get('assets')
        ];
        
        $results = [];
        $hasErrors = false;
        
        foreach ($paths as $name => $path) {
            $exists = file_exists($path);
            $readable = $exists && is_readable($path);
            $writable = $exists && is_writable($path);
            
            $results[$name] = [
                'path' => $path,
                'exists' => $exists ? '‚úÖ' : '‚ùå',
                'readable' => $readable ? '‚úÖ' : '‚ùå',
                'writable' => $writable ? '‚úÖ' : '‚ùå'
            ];
            
            if (!$exists || !$readable) {
                $hasErrors = true;
            }
            
            // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å—ã–≤–∞–µ–º—ã–º–∏
            if (in_array($name, ['logs', 'cache', 'sessions', 'uploads']) && !$writable) {
                $hasErrors = true;
            }
        }
        
        $data = [
            'title' => 'üìÅ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞',
            'status' => $hasErrors ? '‚ùå Error' : '‚úÖ OK',
            'paths' => $results
        ];
        
        if ($hasErrors) {
            $data['error'] = '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º';
            $this->failedChecks++;
        } else {
            $this->passedChecks++;
        }
        
        $this->diagnostics['filesystem'] = $data;
    }

    private function checkPermissions(): void
    {
        $this->totalChecks++;
        
        $criticalFiles = [
            '/etc/vdestor/config/.env' => '0600',
            '/etc/vdestor/config/database.ini' => '0600',
            '/etc/vdestor/config/app.ini' => '0600'
        ];
        
        $results = [];
        $hasErrors = false;
        
        foreach ($criticalFiles as $file => $expectedPerms) {
            if (file_exists($file)) {
                $actualPerms = substr(sprintf('%o', fileperms($file)), -4);
                $owner = posix_getpwuid(fileowner($file))['name'] ?? 'unknown';
                $group = posix_getgrgid(filegroup($file))['name'] ?? 'unknown';
                
                $results[$file] = [
                    'exists' => '‚úÖ',
                    'perms' => $actualPerms,
                    'expected' => $expectedPerms,
                    'secure' => $actualPerms === $expectedPerms ? '‚úÖ' : '‚ùå',
                    'owner' => $owner,
                    'group' => $group
                ];
                
                if ($actualPerms !== $expectedPerms) {
                    $hasErrors = true;
                }
            } else {
                $results[$file] = [
                    'exists' => '‚ùå',
                    'perms' => 'N/A',
                    'expected' => $expectedPerms,
                    'secure' => '‚ùå'
                ];
                $hasErrors = true;
            }
        }
        
        $data = [
            'title' => 'üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞',
            'status' => $hasErrors ? '‚ö†Ô∏è Warning' : '‚úÖ OK',
            'files' => $results
        ];
        
        if ($hasErrors) {
            $data['warning'] = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º';
            $this->warningChecks++;
        } else {
            $this->passedChecks++;
        }
        
        $this->diagnostics['permissions'] = $data;
    }

    private function checkDiskSpace(): void
    {
        $this->totalChecks++;
        
        $partitions = [];
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        $paths = [
            '/' => '–ö–æ—Ä–Ω–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª',
            Paths::get('root') => '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            '/tmp' => '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã',
            Paths::get('logs') => '–õ–æ–≥–∏'
        ];
        
        foreach ($paths as $path => $name) {
            if (is_dir($path)) {
                $free = disk_free_space($path);
                $total = disk_total_space($path);
                $used = $total - $free;
                $percent = round(($used / $total) * 100, 2);
                
                $partitions[$name] = [
                    'path' => $path,
                    'total' => $this->formatBytes($total),
                    'used' => $this->formatBytes($used),
                    'free' => $this->formatBytes($free),
                    'percent_used' => $percent,
                    'status' => $percent > 90 ? '‚ùå' : ($percent > 80 ? '‚ö†Ô∏è' : '‚úÖ')
                ];
            }
        }
        
        $criticalSpace = false;
        $warningSpace = false;
        
        foreach ($partitions as $partition) {
            if ($partition['percent_used'] > 90) {
                $criticalSpace = true;
            } elseif ($partition['percent_used'] > 80) {
                $warningSpace = true;
            }
        }
        
        $data = [
            'title' => 'üíæ –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
            'status' => $criticalSpace ? '‚ùå Critical' : ($warningSpace ? '‚ö†Ô∏è Warning' : '‚úÖ OK'),
            'partitions' => $partitions
        ];
        
        if ($criticalSpace) {
            $data['error'] = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ';
            $this->failedChecks++;
            $this->criticalErrors[] = '–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ';
        } elseif ($warningSpace) {
            $data['warning'] = '–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ';
            $this->warningChecks++;
        } else {
            $this->passedChecks++;
        }
        
        $this->diagnostics['disk_space'] = $data;
    }

    private function checkSystemLoad(): void
    {
        $this->totalChecks++;
        
        $loadAvg = sys_getloadavg();
        $cpuCount = $this->getCPUCount();
        
        $data = [
            'title' => 'üìä –ù–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
            'load_average' => [
                '1_min' => round($loadAvg[0], 2),
                '5_min' => round($loadAvg[1], 2),
                '15_min' => round($loadAvg[2], 2)
            ],
            'cpu_cores' => $cpuCount,
            'normalized_load' => [
                '1_min' => round($loadAvg[0] / $cpuCount, 2),
                '5_min' => round($loadAvg[1] / $cpuCount, 2),
                '15_min' => round($loadAvg[2] / $cpuCount, 2)
            ]
        ];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
        $normalizedLoad = $loadAvg[0
